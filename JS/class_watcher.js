class ClassWatcher{constructor(s,t,a,e){this.targetNode=s,this.classToWatch=t,this.classAddedCallback=a,this.classRemovedCallback=e,this.observer=null,this.lastClassState=s.classList.contains(this.classToWatch),this.init()}init(){this.observer=new MutationObserver(this.mutationCallback),this.observe()}observe(){this.observer.observe(this.targetNode,{attributes:!0})}disconnect(){this.observer.disconnect()}mutationCallback=s=>{for(let t of s)if("attributes"===t.type&&"class"===t.attributeName){let s=t.target.classList.contains(this.classToWatch);this.lastClassState!==s&&(this.lastClassState=s,s?this.classAddedCallback():this.classRemovedCallback())}}}